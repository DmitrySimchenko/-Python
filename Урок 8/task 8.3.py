"""3.	Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере.
Запрашивать у пользователя данные и заполнять список необходимо только числами.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop».
При этом скрипт завершается, сформированный список с числами выводится на экран.
Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
Вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.

"""


class OwnError(Exception):
    def __init__(self, *args):
        self.my_list = []

    def my_input(self):

        while True:
            try:
                num = int(input('Введите число и нажмите Enter: '))
                self.my_list.append(num)
            except:
                print(f"Недопустимое значение")
                again = input(f'Вы хотите продолжить ввод чисел? y/n ')

                if again == 'y':
                    print(try_except.my_input())
                elif again == 'n':
                    return f'Ввод чисел завершен. Текущий список - {self.my_list} \n '
                else:
                    return f'Ввод чисел завершен. Текущий список - {self.my_list} \n '



try_except = OwnError(1)
print(try_except.my_input())
